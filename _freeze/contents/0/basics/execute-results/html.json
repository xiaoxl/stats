{
  "hash": "6f01b81fb37e0770e1a51dec58e6f937",
  "result": {
    "engine": "knitr",
    "markdown": "# Basics \n\n## Data structure\nA dataset is a collection of *values*. Values are organized in two ways. Every value belongs to a *variable* and an *observation*. \n\n\n::: {#def-}\n# Variables and Observations @Wic2014\n- A **variable** contains all values that measure the same underlying attribute (like height, temperature, duration) across units.\n- An **observation** contains all values measured on the same unit (like a person, or a day, or a race) across attributes.\n:::\n \n\n\n::: {#def-}\n# Quantitative and Qualitative @Men2020\n- **Quantitative data** are observations measured on a naturally occurring numerical scale. It is also called *numerical data*.\n- **Qualitative data** are nonnumerical data that can only be classified into one of a group of categories. It is also called *categorical data*.\n:::\n\n\n\n::: {#def-}\n# Discrete and Continuous\n- Discrete random variable: A random variable that assumes either a finite number of values or an infinite sequence of values such as 0, 1, 2...\n- Continuous random variable: A random variable that may assume any numerical value in an interval or collection of intervals.\n:::\n\n\n\n\n::: {.callout-note}\n# Random variables\nA variable in a dataset can be modeled by a *random variable*. The probability density function / probability mass function of the random variable can describe the distribution of all possible values of the variable in a dataset. \n\nThen to make a mearuement is the same as to take a sample from the random variable.  \n\n\n<!-- On the other side, to study a variable in a dataset, we need to identify the random variable corresponding to it. In the rest of the notes we will use variables in a dataset and random variables interchangably. -->\n\n:::\n\n\n## Data Visualization\n### Qualitative (categorical) data\nUsually the most important is the **class relative frequency**: \n$$\n\\text{class relative frequency}=\\frac{\\text{class frequency}}{n}.\n$$\n\nTo display it, we could use table, bar chart or pie chart.\n\n\n::: {.callout-tip collapse=\"true\"}\n\n\n\n\n# Example: Possums\n\nAll the example about possums below come from the dataset [here](./assests/data/possum.csv).\n\n\n\n::: {.panel-tabset}\n\n\n# R\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read.csv('possum.csv')\nhead(df)\n#>   site pop sex age headL skullW totalL tailL\n#> 1    1 Vic   m   8  94.1   60.4   89.0  36.0\n#> 2    1 Vic   f   6  92.5   57.6   91.5  36.5\n#> 3    1 Vic   f   6  94.0   60.0   95.5  39.0\n#> 4    1 Vic   f   6  93.2   57.1   92.0  38.0\n#> 5    1 Vic   f   2  91.5   56.3   85.5  36.0\n#> 6    1 Vic   f   1  93.1   54.8   90.5  35.5\n```\n:::\n\n\n\n\n\n\nWe first compute the frequency table of the variable `pop`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(df$pop)\n#> \n#> other   Vic \n#>    58    46\n```\n:::\n\nor relative frequency talbe:\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(df$pop)/length(df$pop)\n#> \n#>     other       Vic \n#> 0.5576923 0.4423077\n```\n:::\n\n\nThen we could draw the barplot of this variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(table(df$pop))\n```\n\n::: {.cell-output-display}\n![](basics_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nand the pie plot:\n\n::: {.cell}\n\n```{.r .cell-code}\npie(table(df$pop))\n```\n\n::: {.cell-output-display}\n![](basics_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nNote that `table` is handling the statistics, while `barplot` and `pie` draw on top of the result from `table`.\n\n\n\n# Python\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npy_config()\n#> python:         C:/Users/Xinli/miniforge3/envs/ds24/python.exe\n#> libpython:      C:/Users/Xinli/miniforge3/envs/ds24/python311.dll\n#> pythonhome:     C:/Users/Xinli/miniforge3/envs/ds24\n#> version:        3.11.7 | packaged by conda-forge | (main, Dec 15 2023, 08:28:06) [MSC v.1937 64 bit (AMD64)]\n#> Architecture:   64bit\n#> numpy:          C:/Users/Xinli/miniforge3/envs/ds24/Lib/site-packages/numpy\n#> numpy_version:  1.26.2\n#> \n#> NOTE: Python version was forced by use_python() function\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\ndf = pd.read_csv(\"possum.csv\")\ndf.head()\n#>    site  pop sex  age  headL  skullW  totalL  tailL\n#> 0     1  Vic   m  8.0   94.1    60.4    89.0   36.0\n#> 1     1  Vic   f  6.0   92.5    57.6    91.5   36.5\n#> 2     1  Vic   f  6.0   94.0    60.0    95.5   39.0\n#> 3     1  Vic   f  6.0   93.2    57.1    92.0   38.0\n#> 4     1  Vic   f  2.0   91.5    56.3    85.5   36.0\n```\n:::\n\n\n\n\n\nWe first compute the frequency table of the variable `pop`:\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndf['pop'].value_counts()\n#> pop\n#> other    58\n#> Vic      46\n#> Name: count, dtype: int64\n```\n:::\n\nor relative frequency talbe:\n\n::: {.cell}\n\n```{.python .cell-code}\ndf['pop'].value_counts(normalize=True)\n#> pop\n#> other    0.557692\n#> Vic      0.442308\n#> Name: proportion, dtype: float64\n```\n:::\n\n\nThen we could draw the barplot of this variable:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport matplotlib.pyplot as plt\nvc = df['pop'].value_counts()\nplt.bar(vc.index, vc)\nplt.show()\n```\n\n::: {.cell-output-display}\n![](basics_files/figure-html/unnamed-chunk-12-1.png){width=614}\n:::\n:::\n\n\nand the pie plot:\n\n::: {.cell}\n\n```{.python .cell-code}\n_ = plt.pie(vc)\nplt.show()\n```\n\n::: {.cell-output-display}\n![](basics_files/figure-html/unnamed-chunk-13-3.png){width=672}\n:::\n:::\n\n\nNote that `table` is handling the statistics, while `barplot` and `pie` draw on top of the result from `table`.\n\n\n:::\n\n:::\n\n\n### Quantitative (numerical) data\n\nWe would like to use **histogram** to display these type of data. In other words, we split the range into small segments (called *bins*), and count the frequency or relative frequency of data falling into these bins.\n\n\n::: {.callout-tip collapse=\"true\"}\n# Example: Possums\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read.csv('possum.csv')\nhead(df)\n#>   site pop sex age headL skullW totalL tailL\n#> 1    1 Vic   m   8  94.1   60.4   89.0  36.0\n#> 2    1 Vic   f   6  92.5   57.6   91.5  36.5\n#> 3    1 Vic   f   6  94.0   60.0   95.5  39.0\n#> 4    1 Vic   f   6  93.2   57.1   92.0  38.0\n#> 5    1 Vic   f   2  91.5   56.3   85.5  36.0\n#> 6    1 Vic   f   1  93.1   54.8   90.5  35.5\n```\n:::\n\n\n\nWe display the histogram of `headL`. We could use `breaks` to control the number of bins.\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(df$headL, breaks=10)\n```\n\n::: {.cell-output-display}\n![](basics_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nThe function `hist` does not just draw the histogram. It also provide many infomation we might need. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nres <- hist(df$headL, breaks=10)\n```\n\n::: {.cell-output-display}\n![](basics_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n\n```{.r .cell-code}\nres\n#> $breaks\n#>  [1]  82  84  86  88  90  92  94  96  98 100 102 104\n#> \n#> $counts\n#>  [1]  1  6  2 12 22 27 22  7  3  0  2\n#> \n#> $density\n#>  [1] 0.004807692 0.028846154 0.009615385 0.057692308 0.105769231 0.129807692\n#>  [7] 0.105769231 0.033653846 0.014423077 0.000000000 0.009615385\n#> \n#> $mids\n#>  [1]  83  85  87  89  91  93  95  97  99 101 103\n#> \n#> $xname\n#> [1] \"df$headL\"\n#> \n#> $equidist\n#> [1] TRUE\n#> \n#> attr(,\"class\")\n#> [1] \"histogram\"\n```\n:::\n\n:::\n\n### Some statistics\n\nFor a quantitative data, we would also like to compute some statistics: minx, max, quartiles, median and mean. In R, we could use `summary` to compute them, and use box plots to show them.\n\n\n::: {.callout-tip collapse=\"true\"}\n# Example: Possums\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(df)\n#>       site           pop                sex                 age       \n#>  Min.   :1.000   Length:104         Length:104         Min.   :1.000  \n#>  1st Qu.:1.000   Class :character   Class :character   1st Qu.:2.250  \n#>  Median :3.000   Mode  :character   Mode  :character   Median :3.000  \n#>  Mean   :3.625                                         Mean   :3.833  \n#>  3rd Qu.:6.000                                         3rd Qu.:5.000  \n#>  Max.   :7.000                                         Max.   :9.000  \n#>                                                        NA's   :2      \n#>      headL            skullW          totalL          tailL      \n#>  Min.   : 82.50   Min.   :50.00   Min.   :75.00   Min.   :32.00  \n#>  1st Qu.: 90.67   1st Qu.:54.98   1st Qu.:84.00   1st Qu.:35.88  \n#>  Median : 92.80   Median :56.35   Median :88.00   Median :37.00  \n#>  Mean   : 92.60   Mean   :56.88   Mean   :87.09   Mean   :37.01  \n#>  3rd Qu.: 94.72   3rd Qu.:58.10   3rd Qu.:90.00   3rd Qu.:38.00  \n#>  Max.   :103.10   Max.   :68.60   Max.   :96.50   Max.   :43.00  \n#> \n```\n:::\n\n\nWe could use the box plot to show these infomation. It consists of a box, two lines and possibly some points:\n\n- The box in the box plot extends from the lower quartile to the upper quartile. The difference between the upper quartile and the lower quartile is called the inter-quartile range (IQR).\n- The lines, known as *whiskers*, extends to one and a half times the interquartile range, but then they are limited to reaching actual data points. \n- The points, considered as *outliers*, are those which are not covered by the box and the lines.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(df$headL)\n```\n\n::: {.cell-output-display}\n![](basics_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n### Relations among multiple variables\n\nWe could show the relation between two variables in a scatter plot.\n\n\n::: {.callout-tip collapse=\"true\"}\n# Example: Possums\n\nThe cases that both variables are numerical continuous:\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(df$headL, df$skullW)\n```\n\n::: {.cell-output-display}\n![](basics_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nThe cases that one variable is categorical:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(as.factor(df$pop), df$skullW)\n```\n\n::: {.cell-output-display}\n![](basics_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\nNote that in this case, the categorical data has to be a factor. And once it is cast into a factor, the plot is multiple box plots for each category.\n\n\nWe can see pairwise plots for each pair of variables. Note that before the plot, we have to cast `pop` and `sex` into factors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf$pop <- as.factor(df$pop)\ndf$sex <- as.factor(df$sex)\npairs(df)\n```\n\n::: {.cell-output-display}\n![](basics_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\nPair plot is very important since it can easily help us to find the expected relations between variables. We will use it a lot in regression analysis.\n\n:::\n\n\n\n## p\n\n\n::: {#def-}\n# Population\nA **population data set** is a collection (or set) of data measured on all experimental units of interest to you. @Men2020\n:::\n\n::: {#def-}\n# Sample\nA **sample** is a subset of data selected from a population. @Men2020\n:::\n\n\n\n::: {#def-}\n# random sample\nA **random sample** of $n$ experimental units is one selected from the population in such a way that every different sample of size $n$ has an equal probability of selection. @Men2020\n:::\n\n\n\n\n\n### Inferential statistics\n\n\n::: {#def-}\n# Statistical inference @Men2020\n- A **statistical inference** is an estimate, prediction, or some other generatlization about a population based on information contianed in a sample. \n- A **measure of reliability** is a statement about the degree of uncertainty associated with a statistical inference.\n:::\n\n\n\n::: {.callout-note}\n# Inferential statistics\n1. Identify **population**\n2. Identify **variable(s)**\n3. Collect **sample** data\n4. **Inference** about population based on sample\n5. **Measure** of reliability for inference\n:::\n\n\n\n",
    "supporting": [
      "basics_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}