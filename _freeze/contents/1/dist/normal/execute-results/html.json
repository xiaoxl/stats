{
  "hash": "655bfafe7cbfc6525b47e54e58b3b892",
  "result": {
    "engine": "jupyter",
    "markdown": "# Normal distribution\n\n\n\n\n\n::: {.hidden}\n<!-- Constants and basic symbols -->\n\n$$\n\\require{physics}\n\\require{braket}\n$$\n\n$$\n\\newcommand{\\dl}[1]{{\\hspace{#1mu}\\mathrm d}}\n\\newcommand{\\me}{{\\mathrm e}}\n$$\n\n<!-- Probability -->\n\n$$\n \\newcommand{\\Exp}{\\operatorname{E}}\n \\newcommand{\\Var}{\\operatorname{Var}}\n \\newcommand{\\Mode}{\\operatorname{mode}}\n$$\n\n<!-- Distributions pdf -->\n\n$$\n \\newcommand{\\pdfbinom}{{\\tt binom}}\n \\newcommand{\\pdfbeta}{{\\tt beta}}\n \\newcommand{\\pdfpois}{{\\tt poisson}}\n \\newcommand{\\pdfgamma}{{\\tt gamma}}\n \\newcommand{\\pdfnormal}{{\\tt norm}}\n  \\newcommand{\\pdfexp}{{\\tt expon}}\n$$\n\n<!-- Distributions -->\n\n$$\n \\newcommand{\\distbinom}{\\operatorname{B}}\n \\newcommand{\\distbeta}{\\operatorname{Beta}}\n \\newcommand{\\distgamma}{\\operatorname{Gamma}}\n \\newcommand{\\distexp}{\\operatorname{Exp}}\n \\newcommand{\\distpois}{\\operatorname{Poisson}}\n \\newcommand{\\distnormal}{\\operatorname{\\mathcal N}}\n$$\n:::\n\n\n\n\n\n$$\n\\distnormal(x; \\mu, \\sigma^2)\n$$\n\n\n\n- $X_i\\sim \\distnormal(\\mu, \\sigma_0^2)$\n- $\\mu\\sim\\distnormal(m_0,s_0^2)$\n\nposterior mean:\n$$\n\\frac{n}{n+\\frac{\\sigma_0^2}{s_0^2}}\\overline{X}+\\frac{\\frac{\\sigma_0^2}{s_0^2}}{n+\\frac{\\sigma_0^2}{s_0^2}}m.\n$$  \n\n## The empirical theorem\n\n\n\n## Python implementation\n\n\n<details>\n<summary>Click to expand.</summary>\n\n\n\nWe use the [`norm`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.norm.html) object from `scipy.stats` package. \n\n- `scipy.stats.norm(loc=mean, scale=standard_deviation)` is to intialize a normal distribution object.\n- `pdf()`: probablitiy distribution function, both inputs and outputs are `numpy` arrays.\n- `cdf()`: cumulative distribution function, both inputs and outputs are `numpy` arrays.\n- `interval(confidence, loc=0, scale=1)`: confidence interval.\n- `ppf()`: Percent point function (inverse of `cdf`), both inputs and outputs are `numpy` arrays.\n- `rvs(size=1)`: random samplings.\n\n::: {#03748b0e .cell execution_count=1}\n``` {.python .cell-code code-fold=\"true\"}\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(norm.ppf(0.001), norm.ppf(0.999), 100)\ny = norm.pdf(x)\nplt.plot(x, y)\n_ = plt.title(\"pdf for Normal distribution (0, 1)\")\n```\n\n::: {.cell-output .cell-output-display}\n![](normal_files/figure-html/cell-2-output-1.png){width=579 height=431}\n:::\n:::\n\n\n::: {#534924a7 .cell execution_count=2}\n``` {.python .cell-code code-fold=\"true\"}\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(norm.ppf(0.001), norm.ppf(0.999), 100)\ny = norm.cdf(x)\nplt.plot(x, y)\n_ = plt.title(\"cdf for Normal distribution (0, 1)\")\n```\n\n::: {.cell-output .cell-output-display}\n![](normal_files/figure-html/cell-3-output-1.png){width=571 height=431}\n:::\n:::\n\n\n::: {#2ca7b294 .cell execution_count=3}\n``` {.python .cell-code code-fold=\"true\"}\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(norm.ppf(0.001), norm.ppf(0.999), 100)\ny = norm.pdf(x)\nplt.plot(x, y)\n\nsamples = norm.rvs(size=1000)\nplt.hist(samples, bins=20, density=True)\n_ = plt.title(\"histogram of random samplings for Normal distribution (0, 1)\")\n```\n\n::: {.cell-output .cell-output-display}\n![](normal_files/figure-html/cell-4-output-1.png){width=579 height=431}\n:::\n:::\n\n\n</details>\n\n\n\n## R implementation\n\n\n<details>\n<summary>Click to expand.</summary>\nsafljsdf\n\n\n</details>\n\n",
    "supporting": [
      "normal_files"
    ],
    "filters": [],
    "includes": {}
  }
}